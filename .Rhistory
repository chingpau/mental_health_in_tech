library(lattice)
state <- data.frame(state.x77, region=state.region)
state
state.x77
state.center
mtcars
drop <- c("mpg","cyl")
drop
a<- mtcars
dropcol <- subset(a, -names(a) %in% drop = )
dropcol <- subset(a, -names(a) %in% drop )
dropcol <- subset(a, -(names(a) %in% drop) )
dropcol <- subset(a, !(names(a) %in% drop) )
dropcol
names(a)
names(a) %in% drop
!\names(a) %in% drop
!names(a) %in% drop
subset(a , !names(a) %in% drop)
subset(a , !names(a) %in% drop)
dropcol <- a[,!names(a) %in% c("mpg", "cyl")]
dropcol
a<- mtcars
dropcol <- subset(a, names(a) !%in% drop )
dropcol <- subset(a, select = names(a) !%in% drop )
dropcol <- subset(a, select = !(names(a) %in% drop) )
dropcol
dropcol[3]
dropcol[3] = NULL
dropcol
mtcars.head
head(mtcars)
subset(mtcars, cyl == 8)
mtcars[mtcars$cyl == 8,]
mtcars[which(mtcars$cyl == 8),]
library(dplyr)
installed.packages("dlpyr")
installed.packages("dplyr")
library(dplyr)
mtcars
temp <- mtcars
tbl_df(mtcars)
tbl_df(temp)
glimpse(temp)
tbl_temp <- tbl_df(temp)
select(tbl_temp, 1:4, -2)
select(mtcars, 1:4, -3)
select(mtcars, 1:5, -3)
select(mtcars, 1:5)
select(mtcars, 2:5)
select(mtcars, 2:6)
select(mtcars, 2:6, -3)
select(mtcars, 2:6, -2)
select(mtcars, 2:6)
select(mtcars, 2:6, -3)
select(mtcars, 2:6, -4)
head(mtcars)
select(mtcars, starts_with("c"))
tbltemp <- tbl_df(temp)
select(tbltemp, 2:6, -4)
head(tbltemp)
select(tbltemp, starts_with("c"))
select(tbltemp, starts_with("c"), ends_with("t"))
tbltemp[c("cyl", "carb", "drat", "wt")]
g1 <- mutate(tbltemp, hpp = hp/100)
head(g1)
filter(tbltemp , cyl == 8, qsec > 16)
filter(tbltemp , cyl == 8 || cyl = 6, qsec > 16)
filter(tbltemp , cyl == 8 | cyl = 6, qsec > 16)
filter(tbltemp , cyl == c(8,6), qsec > 16)
tbltemp
arrange(tbltemp, mpg, cyl)
arrange(tbltemp, cyl, mpg)
arrange(tbltemp, cyl, desc(mpg))
df <- rename(mtcars, new_name = old_name)
d1<-select(mtcars, mpg:gear, - drat)
d2<-filter(d1, gear>3)
d3<-arrange(d2, desc(cyl))
d3
d4 <- arrange(filter(select(tbltemp, mpg:gear, - drat), gear>3), desc(cyl))
d4
summarise(tbltemp, mavgmpg = mean(mpg))
summarise(tbltemp, mavgmpg = mean(mpg), maxmpg = max(mpg), minmpg = min(mpg))
summarise(filter(tbltemp, cyl == 8), mavgmpg = mean(mpg), maxmpg = max(mpg), minmpg = min(mpg))
select(tbltemp, cyl, mpg)
select(filter(tbltemp, cyl==8), cyl, mpg)
select(filter(tbltemp, cyl==8), cyl, arrange(tbltemp, mpg))
select(filter(tbltemp, cyl==8), cyl, mpg)
arrange(select(filter(tbltemp, cyl==8), cyl, mpg))
arrange(select(filter(tbltemp, cyl==8), cyl, mpg), mpg)
arrange(mpg,select(filter(tbltemp, cyl==8), cyl, mpg))
arrange(mpg, (select(filter(tbltemp, cyl==8), cyl, mpg)))
arrange(select(filter(tbltemp, cyl==8), cyl, mpg), mpg)
by_cyl <- mtcars %>% group_by(cyl)
by_cyl
by_cyl<-group_by(mtcars, cyl)
by_cyl
mtcars
by_cyl <- mtcars %>% group_by(cyl)
summarise(by_cyl, disp=mean(disp), hp=mean(hp))
by_cyl
names(mtcars)
q19 <- tbltemp %>% filter(gear >3, cyl>= 6) %>% group_by(cyl)
q19
q19 <- tbltemp %>% filter(gear >3, cyl>= 6) %>% group_by(cyl) %>% summarise(maxmpg = max(mpg))
q19
q20 <- tbltemp %>%filter(gear >3, cyl>= 6) %>% select(gear , cyl , mpg)
q20
q20 <- tbltemp %>%filter(gear >3, cyl>= 6) %>% select(gear , cyl , mpg) %>% arrange(mpg)
q20
q20 <- tbltemp %>%filter(gear >3, cyl>= 6) %>% select(gear , cyl , mpg) %>% arrange(gear, cyl, mpg)
q20
q19 <- tbltemp %>% filter(gear >3, cyl>= 6) %>% group_by(cyl) %>% summarise(maxmpg = max(mpg))
q19
install.packages(shiny)
install.packages("shiny")
library(shiny)
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
getwd()
list.dirs()
getwd()
list.files()
sport <- c("Hockey", "Baseball", "Football")
league <- c("NHL", "MLB", "NFL")
trophy <- c("Stanley Cup", "Commissioner's Trophy", "Vince Lombardi Trophy")
trophies1 <- cbind(sport, league, trophy)
trophies1
# make another data.frame using data.frame()
trophies2 <- data.frame(sport=c("Basketball", "Golf"),
league=c("NBA", "PGA"),
trophy=c("Larry O'Brien Championship Trophy",
"Wanamaker Trophy"),
stringsAsFactors=FALSE)
# combine them into one data.frame with rbind
trophies2
trophies <- rbind(trophies1, trophies2)
trophies
mtcars
head(mtcars)
mtcars[mtcars$mpg > 20]
mtcars[,mtcars$mpg > 20]
mtcars[mtcars$mpg > 20,]
mtcars[mtcars$mpg > 20]
mtcars[mtcars$mpg > 20]$mpg
mtcars[mtcars$mpg > 20,]$mpg
library(dplyr)
glimpse(mtcars)
summary(mtcars)
str(mtcars)
shiny::runApp('C:/Users/ChingPau/Desktop/mental_health_in_tech')
runApp('C:/Users/ChingPau/Desktop/mental_health_in_tech')
runApp(mental_health_in_tech)
runApp('C:/Users/ChingPau/Desktop/mental_health_in_tech')
getwd()
runApp('C:/Users/ChingPau/Desktop/mental_health_in_tech')
runApp('C:/Users/ChingPau/Desktop/mental_health_in_tech')
setwd("C:/Users/ChingPau/Desktop/mental_health_in_tech/")
db <- dbConnect(SQLite(), dbname="mental_health.sqlite")
mental_health <- dbReadTable(db,"mental_health")
library(RSQLite)
setwd("C:/Users/ChingPau/Desktop/mental_health_in_tech")
db <- dbConnect(SQLite(), dbname="mental_health14.sqlite")
mental_health <- read.csv("../mental_health2014.csv")
View(mental_health)
dbWriteTable(conn = db, name = "mental_health", value = mental_health, row.names = FALSE)
dbListTables(db)
dbListFields(db, "mental_health")
mental_health = dbReadTable(db,"mental_health")
dbDisconnect(db)
